
; Read registers
RX_ERROR        = $20
RX_VALID_TOKEN  = $21
RX_VALID_HANDSH = $22
RX_VALID_PACKET = $23
RX_ENDED        = $24
TX_ACK          = $27
DISCONNECTED    = $2D
FILTERED_STAT_1 = $2E
DO_SOF          = $2F
RX_PID          = $30
RX_TOKEN        = $31
RX_STATUS       = $32
RX_LENGTH       = $33
FRAME_COUNTER   = $60
MEM_READY       = $74
ULPI_REG_READ_0 = $80

; Write registers
TX_PID               = $00
TX_TOKEN             = $01
TX_LENGTH            = $02
PULSE_TX_SEND_TOKEN  = $10
PULSE_TX_SEND_HANDSH = $11
PULSE_TX_SEND_DATA   = $12
PULSE_TX_CHIRP_START = $18
PULSE_TX_CHIRP_END   = $19
PULSE_RESET_FILTER   = $1E
CLR_TX_NO_DATA       = $40
CLR_TX_CHIRP_LEVEL   = $45
SET_TX_NO_DATA       = $50
SET_TX_CHIRP_LEVEL   = $55
MEM_ADDR_LO          = $70
MEM_ADDR_HI          = $71
MEM_TRANSFER_WRITE   = $72
MEM_TRANSFER_READ    = $73
ULPI_REG_WRITE_0     = $C0

; Constants
pid_out      = $1  ; -- token
pid_in       = $9  ; -- token
pid_sof      = $5  ; -- token
pid_setup    = $D  ; -- token
pid_data0    = $3  ; -- data
pid_data1    = $B  ; -- data
pid_data2    = $7  ; -- data
pid_mdata    = $F  ; -- data
pid_ack      = $2  ; -- handshake
pid_nak      = $A  ; -- handshake
pid_stall    = $E  ; -- handshake
pid_nyet     = $6  ; -- handshake
pid_pre      = $C  ; -- token
pid_err      = $C  ; -- handshake
pid_split    = $8  ; -- token
pid_ping     = $4  ; -- token
pid_reserved = $0  ;

Do_halt      = $8001
Do_same_cmd  = $8002
Do_next_cmd  = $8003

Event_no_device      = $8011
Event_device_present = $8012
Event_device_removed = $8013

CmdSetup   = $21
CmdBulkOut = $22
CmdBulkIn  = $23

ULPI_R_IRQ_STATUS  = $93
ULPI_W_FUNC_CTRL   = $C4
ULPI_W_OTG_CONTROL = $CA

;testbench
;    CALL test
start
    ; Turn off power and apply discharge
    LOAD  #$0E
    OUTP  ULPI_W_OTG_CONTROL
    
    CALL  clear_fifos

_startup_power_check    
    INP   ULPI_R_IRQ_STATUS
    AND   #6
    BEQ   _no_power
    ; power detected. Wait to see if discharging helps the power to disappear
    LOAD  #4000
    CALL  delay
    INP   ULPI_R_IRQ_STATUS
    AND   #2
    BEQ   _no_power

    ; still power detected, we should NOT turn on our power
    LOAD  #$06
    OUTP  ULPI_W_OTG_CONTROL
    BRA   _start2

_no_power
    LOAD  #$26
    OUTP  ULPI_W_OTG_CONTROL  ; turn on our power

_start2
    ; initialize our function control in FS mode, reset the transceivers and all
    LOAD  #$61
    OUTP  ULPI_W_FUNC_CTRL

    ; wait 700 ms for the power to get stable and all. a loop to check when the power is stable might be good here
    LOAD  ResetDelay
    CALL  delay
    
    ; now lets see if we can detect that there is a device already attached
    INP   RX_STATUS
    AND   #3
    BEQ   _no_device ; both bits are 0, so noone is pulling it up
    
    ; there is a device present. Let's reset it
    CALL  bus_reset

    LOAD  #Event_device_present
    CALL  attr_fifo_push
    LOAD  LinkSpeed
    CALL  attr_fifo_push
_device_detected
    BRA   main_loop
            
_no_device
    LOAD  #Event_no_device
    CALL  attr_fifo_push

_wait_for_device_attachment
    BRA  _wait_for_device_attachment
    

delay
    STORE DelayTimer
_delay
    INP   DO_SOF
    BPL   _delay      
    OUTP  DO_SOF
    LOAD  DelayTimer
    SUB   #1
    STORE DelayTimer
    BNE   _delay
    RET    

tx_wait
    INP   TX_ACK
    BPL   tx_wait
    OUTP  TX_ACK
    RET

rx_wait
    INP  RX_ENDED
    BMI  _rx_done
    INP  DO_SOF
    BPL  rx_wait
    OUTP DO_SOF
    ; CALL _do_sof
_rx_wait2
    INP  RX_ENDED
    BMI  _rx_done
    INP  DO_SOF
    BPL _rx_wait2
_rx_err
    LOAD #1
    RET
_rx_done
    OUTP RX_ENDED
    INP  RX_ERROR
    BPL  _rx_no_err
    OUTP RX_ERROR
    BRA  _rx_err
_rx_no_err
    LOAD #0
    RET
        
send_ack
    LOAD  #pid_ack
    OUTP  TX_PID
    OUTP  PULSE_TX_SEND_HANDSH
    BRA   tx_wait

send_token_to_ep
    OUTP  TX_PID
    LOAD  DeviceAddress
    OUTP  TX_TOKEN
    OUTP  PULSE_TX_SEND_TOKEN
    BRA   tx_wait

check_sof
    INP   DO_SOF
    BPL   _no_sof
    OUTP  DO_SOF
    LOAD  LinkSpeed
    CMP   #2
    BRA   _do_sof    
    LOAD  SofDiv
    ADD   #1
    STORE SofDiv
    AND   #7
    BNE   _no_sof
_do_sof
    INP   FRAME_COUNTER
    OUTP  TX_TOKEN
    LOAD  #pid_sof
    OUTP  TX_PID
    OUTP  PULSE_TX_SEND_TOKEN
    CALL  tx_wait
_no_sof
    INP   DISCONNECTED
    BPL   _sof_done
    OUTP  DISCONNECTED
    LOAD  #Event_device_removed
    CALL  attr_fifo_push
_sof_done
    RET

main_loop
    CALL  check_sof
    LOAD  command
    BEQ   _check_auto_pipes
    ; always transfer memory pointer to memory controller
    LOAD  mem_addr_high
    OUTP  MEM_ADDR_HI
    LOAD  mem_addr_low
    OUTP  MEM_ADDR_LO
    LOAD  #0
    STORE transferred
    LOAD  cmd_device_addr
    STORE DeviceAddress
    LOAD  command    
    CMP   #CmdSetup
    BEQ   _do_setup
    CMP   #CmdBulkOut
    BEQ   _do_bulk_out
    CMP   #CmdBulkIn
    BEQ   _do_bulk_in
    BRA   _command_done

_do_setup
    LOAD  data_length
    CALL  read_from_memory
    CALL  do_setup_out
    CALL  attr_fifo_push
    BRA   _command_done

_do_bulk_out
    LOAD  data_length
    CALL  read_from_memory
    CALL  do_send_packet
    CALL  attr_fifo_push
    BRA   _command_done

_do_bulk_in
    CALL  do_bcint_in
    STORE temp
    INP   RX_LENGTH
    STORE transferred
    BEQ   _bi_no_write
    OUTP  MEM_TRANSFER_WRITE
_di1
    INP   MEM_READY
    BPL   _di1
_bi_no_write
    LOAD  temp
    CALL  attr_fifo_push
;   BRA   _commmand_done
        
_command_done
    LOAD  #0
    STORE command

_check_auto_pipes
    BRA   main_loop

read_from_memory
    STORE DataLengthOut
    BEQ   _no_data
    OUTP  MEM_TRANSFER_READ
    OUTP  CLR_TX_NO_DATA
_ds1
    INP   MEM_READY
    BPL   _ds1
    RET
_no_data
    OUTP  SET_TX_NO_DATA
    RET
    
SofDiv
    .dw 0
    
DeviceAddress
    .dw 0
DataLengthOut
    .dw 8
DataToggle
    .dw 0
    
ErrorCount
    .dw 0    
ExpectedToggle
    .dw 0    
LinkSpeed
    .dw 0
ResetTimer
DelayTimer
    .dw 0
LinkRegisterMap
    .dw $46
    .dw $45
    .dw $40
    .dw $50
ResetDelay
    .dw 5600
NumberOfChirps
    .dw 75
    
do_setup_out
    ; first, we send out a setup token
    LOAD  #pid_setup
    CALL  send_token_to_ep

    LOAD  #pid_data0
    BRA   do_bcint_out
    
do_send_packet
    LOAD  #pid_out
    CALL  send_token_to_ep
    
    LOAD  DataToggle
    AND   #8
    OR    #pid_data0
    BRA   do_bcint_out    
    
; paramter: PID (DATA0 or DATA1)
do_bcint_out 
    OUTP  TX_PID
    LOAD  DataLengthOut
    SUB   #1
    OUTP  TX_LENGTH
    OUTP  PULSE_TX_SEND_DATA
    CALL  tx_wait
    
    ; now, let's wait for an answer from our target (ack)
    CALL  rx_wait
    BNE   _bcinto_failed
    INP   RX_VALID_HANDSH
    BEQ   _bcinto_failed
    OUTP  RX_VALID_HANDSH
    INP   RX_PID
    CMP   #pid_ack
    BNE   _bcinto_no_ack
    LOAD  #Do_next_cmd
    RET
_bcinto_no_ack
    CMP   #pid_nak
    BNE   _bcinto_no_nak
_bcinto_do_same_cmd
    LOAD  #Do_same_cmd
    RET
_bcinto_no_nak
    CMP   #pid_stall
    BNE   _bcinto_failed
_bcinto_do_halt
    LOAD  #Do_halt
    RET
_bcinto_failed
    LOAD  ErrorCount
    ADD   #1
    STORE ErrorCount
    CMP   #3
    BEQ   _bcinto_do_halt
    BRA   _bcinto_do_same_cmd
  
do_bcint_in
    LOAD  #pid_in
    CALL  send_token_to_ep
    
    ; now, let's wait for an answer from our target (data, nak, or stall)
    CALL  rx_wait
    BNE   _bcinti_failed
    INP   RX_PID
    CMP   #pid_data0
    BNE   _bcinti_notd0
    CALL  send_ack
    LOAD  #0
    BRA   _bcinti_check_accept
_bcinti_notd0
    CMP   #pid_data1
    BNE   _bcinti_notd1
    CALL  send_ack
    LOAD  #8
_bcinti_check_accept
;    CMP   ExpectedToggle
;    BNE   _bcinti_retry
_bcinti_ok
    LOAD  #Do_next_cmd ; OK!
    RET
_bcinti_retry
    LOAD  #Do_same_cmd
    RET
_bcinti_notd1
    BRA _bcinto_no_ack 
_bcinti_failed
    BRA _bcinto_failed


; The following code issues a reset, and tries to get the device in high speed mode

bus_reset
    ; first we check the current status of the bus power.
    INP   RX_STATUS
    AND   #$38 ; 3C
    CMP   #$08 ; 0C
    BEQ   _reset_chk_ls
    LOAD  #3
    STORE LinkSpeed
    RET
_reset_chk_ls
    INP   RX_STATUS
    AND   #$02
    BEQ   _reset_fs
    LOAD  #0
    STORE LinkSpeed
    BRA   _do_reset
_reset_fs
    LOAD  #1
    STORE LinkSpeed

_do_reset
; now we set up the ULPI register to output single ended zero.
    LOAD  #$50
    OUTP  ULPI_W_FUNC_CTRL

    LOAD  #120
    STORE ResetTimer
    OUTP  PULSE_RESET_FILTER
    OUTP  FILTERED_STAT_1
    
    LOAD  LinkSpeed
    BEQ   _reset_simple

_reset_1
    INP   FILTERED_STAT_1
    BMI   _reset_chirp_heard
    INP   DO_SOF
    BPL   _reset_1
    OUTP  DO_SOF
    LOAD  ResetTimer
    SUB   #1
    STORE ResetTimer
    BNE   _reset_1
_reset_end
    LOAD  LinkSpeed
    ADD   #LinkRegisterMap
    STORE _reset_temp
    LOADI _reset_temp
    OUTP  $C4 ; ULPI_WRITE
    RET
_reset_temp
    .dw 0
_reset_chirp_heard    
    LOAD  #2
    STORE LinkSpeed
    ; Just go ahead and send our chirp back
    OUTP  CLR_TX_CHIRP_LEVEL
    OUTP  PULSE_TX_CHIRP_START
    LOAD  NumberOfChirps
    STORE ResetTimer
_chirp_loop
    OUTP  CLR_TX_CHIRP_LEVEL
    LOAD  #750
_chirp_k
    SUB   #1
    BNE   _chirp_k
    LOAD  ResetTimer
    SUB   #1
    STORE ResetTimer
    BEQ   _chirps_done
    OUTP  SET_TX_CHIRP_LEVEL
    LOAD  #750
_chirp_j
    SUB   #1
    BNE   _chirp_j
    BRA   _chirp_loop
; done chirping
_chirps_done
    OUTP  PULSE_TX_CHIRP_END
    LOAD  #3
    STORE ResetTimer
_reset_simple
    INP   DO_SOF
    BPL   _reset_simple
    OUTP  DO_SOF
    LOAD  ResetTimer
    SUB   #1
    STORE ResetTimer
    BNE   _reset_simple
    BRA   _reset_end

temp
    .dw 0

; Buffer management:
; Fifo with numeric values that are calcualted by software: 64K addressing space, so only low word.

; BLOCK FIFO
; check if fifo empty. Will return 0 (BEQ..) when fifo is empty
blk_fifo_empty
    LOAD head_pointer_blk
    XOR  tail_pointer_blk
    RET
    
; get a value from the fifo
blk_fifo_pop
    CALL  blk_fifo_empty
    BNE   _fifo_pop1
    RET
_fifo_pop1
    LOAD  tail_pointer_blk
    ADD   #block_fifo
    STORE fifo_temp_addr
    LOAD  tail_pointer_blk
    ADD   #1
    AND   #$3F
    STORE tail_pointer_blk
    LOADI fifo_temp_addr
    RET

; ATTRIBUTE FIFO
attr_fifo_full
    LOAD head_pointer_atr
    ADD  #1
    AND  #$7F
    XOR  tail_pointer_atr
    RET

attr_fifo_push
    STORE  fifo_temp_data
    LOAD   head_pointer_atr
    ADD    #attrib_fifo
    STORE  fifo_temp_addr
    LOAD   fifo_temp_data
    STORI  fifo_temp_addr
    LOAD   head_pointer_atr
    ADD    #1
    AND    #$7F
    STORE  head_pointer_atr
    RET

clear_fifos
    LOAD   #0
    STORE  tail_pointer_atr
    STORE  head_pointer_atr
    STORE  tail_pointer_blk
    STORE  head_pointer_blk
    RET
    
fifo_temp_data
    .dw 0
fifo_temp_addr
    .dw 0

test
    LOAD  #13
    STORE data_length
    LOAD  #$1234
    STORE mem_addr_high
    OUTP  MEM_ADDR_LO
    LOAD  #$5678
    STORE mem_addr_low
    OUTP  MEM_ADDR_HI
    LOAD  #CmdSetup
    STORE command
    LOAD  #5
    STORE ResetDelay
    STORE NumberOfChirps
    LOAD  #14
    OUTP  MEM_TRANSFER_WRITE
    RET

attrib_fifo      = 0x330 ; 128 entries (up to 3AF)
block_fifo       = 0x3B0 ; 64 entries (up to 3EF)

command          = 0x3F0 ; command code
mem_addr_low     = 0x3F2 ; memory pointer
mem_addr_high    = 0x3F3 ; memory pointer
cmd_device_addr  = 0x3F4 ; device target address
toggle_state     = 0x3F5 ; current toggle state * 8
data_length      = 0x3F6 ; data length to transfer
transferred      = 0x3F8 ; amount of data actually transferred

address_high     = 0x3FB ; updated by software only
tail_pointer_atr = 0x3FC ; updated by software only    
head_pointer_atr = 0x3FD ; updated by nano only 
tail_pointer_blk = 0x3FE ; updated by nano only
head_pointer_blk = 0x3FF ; updated by software only

; Empty fifo: tail pointer is equal to head pointer.

; For autonomous receive streams, we use this packet pointer.
; However, we need to store the source and also the length? (11 bits source, 10 bits min length, so two 16 bits words)
; Software knows what blocks have been issued, so the addresses are known in software.

; For synchronous transfers (initiated by the software), another fifo is used, one to push the command, length and address down.
